import os
import json
from pathlib import Path
import logging

# from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import JsonOutputParser
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any

from config_mvp.settings_mvp import MAIN_LLM_API_URL

# --- Logger Setup ---
logger = logging.getLogger(__name__)

# --- Pydantic Models for Structured Output ---
# This defines the desired structure of the LLM's output.
class Plan(BaseModel):
    """
    Represents the structured plan generated by the AI to address a user's query.
    """
    route: str = Field(description="The execution route. Must be one of: 'SQL', 'RAG', 'BOTH', 'CLARIFY'.")
    intents: Optional[List[str]] = Field(None, description="A list of normalized user intents identified from the query.")
    entities: Optional[Dict[str, Any]] = Field(None, description="A dictionary of extracted entities, e.g., {'customer_id': '12345'}.")
    sql_prompt: Optional[str] = Field(None, description="A concise, self-contained English question for the Text-to-SQL model. Only present if route is 'SQL' or 'BOTH'.")
    policy_query: Optional[str] = Field(None, description="A clear, self-contained English question for the RAG tool. Only present if route is 'RAG' or 'BOTH'.")
    language: str = Field(description="The language of the user's query. Must be 'vi' for Vietnamese or 'en' for English.")

# The load_system_prompt_template function is no longer needed and has been removed.

def get_main_llm_mvp(google_api_key: Optional[str] = None, model_name: str = "local-model", temperature: float = 0.1):
    """
    Initializes and returns the main planning LLM chain.

    This chain takes a user query and history, and outputs a structured `Plan` object.
    """
    # if not google_api_key:
    #     google_api_key = os.getenv("GOOGLE_API_KEY")
    # if not google_api_key:
    #     raise ValueError("GOOGLE_API_KEY not found in environment or passed as argument.")

    # # 1. Initialize the Chat Model
    # llm = ChatGoogleGenerativeAI(
    #     model=model_name,
    #     google_api_key=google_api_key,
    #     temperature=temperature,
    #     convert_system_message_to_human=True # For models that need it
    # )

    # 1. Initialize the Chat Model (LM Studio OpenAI-compatible server)
    llm = ChatOpenAI(
        model=model_name,
        temperature=temperature,
        base_url=MAIN_LLM_API_URL,
        api_key="lm-studio" # Not used by LM Studio but required by the library
    )

    # 2. Setup the Output Parser
    output_parser = JsonOutputParser()

    # 3. Define the Hardcoded Prompt Template
    # --- CHANGE: The prompt is now a hardcoded multi-line string ---
    system_prompt_template_str = """
You are an AI assistant for a Vietnamese retail bank.  
Your job is to read the user's request and produce a **plan** – a single JSON object that tells downstream agents what to do.

─────────────────────────  CORE TASK  ─────────────────────────
Given {history} and the current user query {query}:

1. Decide the execution **route**  
   • "SQL"  – query needs personal or contract-specific data  
   • "RAG"  – query asks for general policies / definitions / procedures  
   • "BOTH" – needs both personal data **and** policy context

2. Produce (when applicable)  
   • a list of **intents** (see intent catalogue below)  
   • an **entities** object containing only keys from the Entity Catalogue  
   • a short **sql_prompt** in **English** if route is SQL or BOTH  
   • a **policy_query** in **Vietnamese** if route is RAG or BOTH

────────────────────────  ROUTING RULES  ───────────────────────
1. SQL route if the user:
   • Mentions their customer / contract / loan IDs  
   • Requests balances, rates, instalments, fees, etc. for *their* loan  
   • Uses phrases like "khoản vay của tôi", "mã id …", "HĐ-…", "LMS…", etc.

2. RAG route **only** if:
   • The user asks about general policy, definitions, requirements or procedures  
   • No personal identifiers or customer-specific data are requested

3. BOTH route if both 1 & 2 are true in the same question.

───────────────────────  OUTPUT FORMAT  ───────────────────────
Return **only** a JSON object that can be parsed by `json.loads`, exactly:

{{
  "route": "SQL" | "RAG" | "BOTH",
  "intents": [ ... ],                 // **Empty array [] when route == "RAG"**
  "entities": {{                       // Only keys from Entity Catalogue
      "contract_id": "HD123456",
      "customer_id": 12345,
      ...
  }},
  "sql_prompt":  "…",                 // null if not needed
  "policy_query": "…",                // null if not needed
  "language": "vi"
}}

──────────────────────── INTENT CATALOGUE ─────────────────────
# ─── Loan-information intents ───────────────────────────────────────────────
query_list_active_loans:               "List all active loans for the logged-in customer"
query_loan_details_by_identifier:      "Show full details for the specified contract"
query_loan_current_status:             "Return the status of the given loan"
query_loan_product_type:               "Return the product name/type for the loan"
query_assigned_loan_officer:           "Return the officer or department in charge of the loan"
query_loan_contact_point:              "Give the best contact channel for that loan"

# ─── Amount, balance, rate ─────────────────────────────────────────────────
query_original_loan_amount:            "Original principal amount"
query_disbursed_amount:                "Total amount actually disbursed"
query_outstanding_principal_balance:   "Current outstanding principal"
query_total_amount_due:                "Pay-off amount if settled today"
query_current_loan_interest_rate:      "Current nominal interest rate"
query_interest_rate_type:              "Fixed or variable indicator"
query_overdue_interest_rate:           "Penalty rate applied when overdue"
query_interest_rate_effective_date:    "Date on which the current rate became effective"
query_interest_rate_change_history:    "Chronological history of rate changes"

# ─── Fees & penalties (NEW) ────────────────────────────────────────────────
query_late_payment_penalty:            "Penalty amount for a specified number of late days"

# ─── Fees on origination / other ───────────────────────────────────────────
query_loan_origination_fees:           "Origination or processing fees charged"
query_other_applicable_fees:           "Other fees (late, early repayment, etc.)"

# ─── Dates & tenor ────────────────────────────────────────────────────────
query_loan_origination_date:           "Loan start / disbursement date"
query_loan_maturity_date:              "Contract end / maturity date"
query_loan_term_duration:              "Original loan tenor (months/years)"
query_remaining_loan_term:             "Remaining tenor as of today"

# ─── Instalment schedule ──────────────────────────────────────────────────
query_next_installment_due_date:       "Date of the next scheduled payment"
query_next_installment_amount:         "Amount due in the next payment"
query_next_installment_breakdown:      "Principal/interest split of the next payment"
query_full_repayment_schedule:         "Return the full amortisation schedule"
query_specific_installment_details:    "Details for a given instalment by index/date"
query_total_number_of_installments:    "Total instalment count in the contract"
query_remaining_number_of_installments:"Number of instalments still unpaid"

# ─── Payment history ──────────────────────────────────────────────────────
query_last_payment_date:               "Date of the most recent payment"
query_last_payment_amount:             "Amount of the most recent payment"
query_last_payment_status:             "Whether the last payment was successful"
query_payment_history_list:            "List the last N payments or payments in a period"
query_specific_payment_details:        "Payment detail by date or transaction ID"
query_missed_payments:                 "List any instalments that are overdue"

# ─── Interest & DPD snapshots (NEW) ───────────────────────────────────────
query_accrued_interest_to_date:        "Total interest accrued up to today"
query_days_past_due_bucket:            "Current days-past-due and bucket code"


──────────────────────── ENTITY CATALOGUE ─────────────────────
Use these keys **only** & follow patterns / enums exactly.

[
  {{ "name":"contract_id",        "type":"string",  "pattern":"^[A-Z0-9]{{6,}}$",              "example":"HD123456" }},
  {{ "name":"customer_id",        "type":"number",                                                  "example":34567 }},
  {{ "name":"los_cif_no",         "type":"string",                                                  "example":"LOS000987" }},
  {{ "name":"lms_cif_no",         "type":"string",                                                  "example":"LMS001122" }},
  {{ "name":"loan_id",            "type":"string",                                                  "example":"LD_NO=00001" }},
  {{ "name":"date",               "type":"date",    "format":"YYYY-MM-DD",                         "example":"2025-06-15" }},
  {{ "name":"date_from",          "type":"date",    "format":"YYYY-MM-DD",                         "example":"2025-01-01" }},
  {{ "name":"date_to",            "type":"date",    "format":"YYYY-MM-DD",                         "example":"2025-06-30" }},
  {{ "name":"amount",             "type":"number",  "unit":"VND",                                  "example":10000000 }},
  {{ "name":"currency",           "type":"string",  "enum":["VND","USD"],                          "example":"VND" }},
  {{ "name":"percentage_rate",    "type":"number",  "range":[0,100],                               "example":5.5 }},
  {{ "name":"loan_status",        "type":"string",  "enum":["active","paid_off","overdue"],        "example":"active" }},
  {{ "name":"loan_product",       "type":"string",                                                  "example":"Unsecured Consumer" }},
  {{ "name":"interest_rate_type", "type":"string",  "enum":["fixed","variable"],                   "example":"fixed" }},
  {{ "name":"loan_officer_id",    "type":"string",                                                  "example":"EMP0012" }},
  {{ "name":"installment_no",     "type":"integer",                                                 "example":5 }},
  {{ "name":"payment_id",         "type":"string",                                                  "example":"PMT7890" }},
  {{ "name":"days_overdue",       "type":"integer",                                                 "example":7 }},
  {{ "name":"period_months",      "type":"integer",                                                 "example":24 }},
  {{ "name":"period_years",       "type":"integer",                                                 "example":2 }},
  {{ "name":"fee_type",           "type":"string",  "enum":["origination","late","early_repay"],   "example":"late" }},
  {{ "name":"policy_article",     "type":"string",                                                  "example":"Article 12" }},
  {{ "name":"policy_clause",      "type":"string",                                                  "example":"Clause 3" }},
  {{ "name":"officer_phone",      "type":"string",  "pattern":"^0\\d{{8,10}}$",                      "example":"0912345678" }},
  {{ "name":"officer_email",      "type":"string",  "format":"email",                              "example":"support@bank.vn" }},
  {{ "name":"address",            "type":"string",                                                  "example":"123 Lê Lợi, Q1" }},
  {{ "name":"loan_type",          "type":"string",  "enum":["secured","unsecured"],                "example":"unsecured" }},
  {{ "name":"overdue_flag",       "type":"boolean",                                                 "example":true }},
  {{ "name":"bucket_code",        "type":"string",                                                  "example":"B2" }},
  {{ "name":"stage_code",         "type":"string",                                                  "example":"STG01" }},
  {{ "name":"group_code",         "type":"string",                                                  "example":"GRP_SOFTCALL" }},
  {{ "name":"user_code",          "type":"string",                                                  "example":"COLL0123" }}
]

──────────────────────────  EXAMPLES  ──────────────────────────
SQL:
User → "Tất cả khoản vay còn hiệu lực của tôi. ID: 1001"
Assistant → {{
  "route":"SQL",
  "intents":["query_list_active_loans"],
  "entities":{{"customer_id":1001}},
  "sql_prompt":"Find all active loans for customer 1001",
  "policy_query":null,
  "language":"vi"
}}

RAG: (no intents needed)
User → "Quy định về phí trả nợ trước hạn?"
Assistant → {{
  "route":"RAG",
  "intents":[],
  "entities":{{}},
  "sql_prompt":null,
  "policy_query":"Quy định về phí trả nợ trước hạn?",
  "language":"vi"
}}

BOTH:
User → "HĐ HD001. Phí trả nợ trước hạn bao nhiêu?"
Assistant → {{
  "route":"BOTH",
  "intents":["query_loan_details_by_identifier","query_other_applicable_fees"],
  "entities":{{"contract_id":"HD001"}},
  "sql_prompt":"Get contract HD001 to calculate pre-payment fee.",
  "policy_query":"Chính sách hiện hành về phí trả nợ trước hạn là gì?",
  "language":"vi"
}}

"""
    
    prompt = ChatPromptTemplate.from_template(
        template=system_prompt_template_str,
        partial_variables={"format_instructions": output_parser.get_format_instructions()}
    )

    # 4. Construct the Chain
    # The full chain is: Prompt -> LLM -> Output Parser
    chain = prompt | llm | output_parser

    return chain

